import 'dart:async';
import 'dart:convert';
import 'package:universal_io/io.dart';
import 'package:dio/adapter.dart';
import 'package:dio/dio.dart';
import 'package:dio_cookie_manager/dio_cookie_manager.dart';
import 'package:flutter/widgets.dart';
import 'package:vesta/datastorage/local/fileManager.dart';
import 'package:vesta/datastorage/studentData.dart';
import 'package:vesta/Vesta.dart';
import 'package:vesta/datastorage/Lists/schoolList.dart';
import 'package:vesta/utils/PlatformHelper.dart';
import 'package:vesta/web/webdata/webDataBase.dart';
import 'package:vesta/web/webdata/webDataCalendarRequest.dart';
import 'package:vesta/web/webdata/webDataCalendarResponse.dart';
import 'package:vesta/web/webdata/webDataCourseRequest.dart';
import 'package:vesta/web/webdata/webDataCourseResponse.dart';
import 'package:vesta/web/webdata/webDataLogin.dart';
import 'package:vesta/web/webdata/webDataMessageRead.dart';
import 'package:vesta/web/webdata/webDataMessages.dart';
import 'package:cookie_jar/cookie_jar.dart';
import 'package:vesta/web/webdata/webDataSemesters.dart';
import 'package:vesta/web/webdata/webDataSemestersRequest.dart';
import 'package:vesta/web/webdata/webDataStudentBook.dart';
import 'package:vesta/web/webdata/webDataSubjectRequest.dart';
import 'package:vesta/web/webdata/webDataSubjectResponse.dart';
import 'package:vesta/web/webdata/webDataSubjectSignup.dart';

typedef _ServicesCallback = Future<Object> Function<T extends WebDataBase>(School school ,T request);
typedef _VoidFutureCallback = Future<void> Function();

abstract class WebServices
{

  //The invalid certs of shools
  static const _certs = <String>[
'''
-----BEGIN CERTIFICATE-----MIIDCzCCAfOgAwIBAgIQEnVlagYwjqFCZlfd3KXunjANBgkqhkiG9w0BAQsFADAeMRwwGgYDVQQDDBNXaW5kb3dzIEF6dXJlIFRvb2xzMB4XDTIwMDUzMDExNTk1MFoXDTIxMDUzMDEyMDk1MVowHjEcMBoGA1UEAwwTV2luZG93cyBBenVyZSBUb29sczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAMcJxeuIM8WN5cJx9hEORGJCOjfZCLgLoDXlSu5JLz9I/gDyDxYWfQ1CtUlN1BFsc5+oIFGv3LledtpBW528LoRWf6diAFwMfbzda3VqRUQaUZkLYSYa99hQ82TG7Vwbd39ujUu89kyxw0OWl6NjhJYzpiarDQmyO7Lv1l5s5pZwowOT0+bwd+xvpzCz7jf8/l8YxChFaEy8ow7wtNo7CjibWUdOEHDFmOhhP1u4GC86Xaqr1SF+wb/V1LRHCscOsruv03u5eK04HqCIKCImtERV16sq9ibJMfXIocrXot1UOCTI6IOUEwYWm0nx+ieBzIGLWNviiIF9cgQexh6WcOUCAwEAAaNFMEMwEgYDVR0TAQH/BAgwBgIEf////zAdBgNVHQ4EFgQU+Pd1+XfPT9SCgr7SsyL+fh30NiQwDgYDVR0PAQH/BAQDAgUgMA0GCSqGSIb3DQEBCwUAA4IBAQAMCIA9ofsV6Us4GwA1g/3lnieMmooQIm3iCqJeI9juoL+4dJcIV83jAd0M4Pv3Awx8rXSIOTEV/SHJeSKCPQgwjtICtWUHXnoMyCC3dr5VXm2Tqz5wbywWB/wWzZTU4t2KhHghQfHiUjE8NXCid4WyEQ479niPu2IO+6yigyvgSIkCHUCYxuBEvE3xs41sM1V/hyiZCK4AxKWEAbMYPCxvGzsFATeeDVkN6p7ka2F5jftXqUqAfCd84njknstCXdxtsTAXbhFpUhqKNQR5XZJ+ginpQwZ7iq4VytxaJZJ3DnKovu8mpQLDPWyjQKy+5QKilWms3w/tCAKwOb1zRLhy-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----MIIGajCCBVKgAwIBAgIQBqDFLG/DckqUtouLsZpLvDANBgkqhkiG9w0BAQsFADBEMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMR4wHAYDVQQDExVEaWdpQ2VydCBFViBSU0EgQ0EgRzIwHhcNMjAwNzEwMDAwMDAwWhcNMjEwNTI1MTIwMDAwWjCBuTEaMBgGA1UEDwwRR292ZXJubWVudCBFbnRpdHkxEzARBgsrBgEEAYI3PAIBAxMCSFUxGjAYBgNVBAUTEUdvdmVybm1lbnQgZW50aXR5MQswCQYDVQQGEwJIVTEOMAwGA1UEBwwFR3nFkXIxIzAhBgNVBAoMGlN6w6ljaGVueWkgSXN0dsOhbiBFZ3lldGVtMQwwCgYDVQQLEwNFSUsxGjAYBgNVBAMTEW5ldHc1Lm5uZXQuc3plLmh1MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAy2fY4H01NNJKcHICN3NdO6KevSHCC9VJUgmL6YOX+30cwqd2KwzdWin7Lr+8uLfWN5v2GKYOnsSF6EElttArZU1SImSr7UGhFzS1MF4LnY0HU8PSqOYNrCmTZN3CEraoD+NevV8JPOaqQx8il88U05Z6G6AQsykdR5qt/8sWC4CQ0TWTe7vjtyNTyBSoyf/DErPhia/Sc124SnebrnMM0VneQldgq6NTSQZEGwuvYD6GoKGEVhlfAeI6eqJm3dvYXiCYGcTXq/Lgxx/n+eBPV94SBxgOwBQ1NAPAr5VNlvjDN3exCR10tXpPKwlEzIuTHK67Un3q991jTkmBNvnx5QIDAQABo4IC4DCCAtwwHwYDVR0jBBgwFoAUak5Qv5honVt7IHXUWQF5SGaSMgYwHQYDVR0OBBYEFLU8SRk6Ir7hM6UMnQAfUR1j1LU4MBwGA1UdEQQVMBOCEW5ldHc1Lm5uZXQuc3plLmh1MA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwdQYDVR0fBG4wbDA0oDKgMIYuaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0RVZSU0FDQUcyLmNybDA0oDKgMIYuaHR0cDovL2NybDQuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0RVZSU0FDQUcyLmNybDBLBgNVHSAERDBCMDcGCWCGSAGG/WwCATAqMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy5kaWdpY2VydC5jb20vQ1BTMAcGBWeBDAEBMHMGCCsGAQUFBwEBBGcwZTAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQuY29tMD0GCCsGAQUFBzAChjFodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5jb20vRGlnaUNlcnRFVlJTQUNBRzIuY3J0MAwGA1UdEwEB/wQCMAAwggEEBgorBgEEAdZ5AgQCBIH1BIHyAPAAdwD2XJQv0XcwIhRUGAgwlFaO400TGTO/3wwvIAvMTvFk4wAAAXM5E+KXAAAEAwBIMEYCIQD6QHNrJt5D1qCxkMW/928FyDG8zS4S8YnLM8lM2R2j5AIhAMMUtprTSzDzA6ANo8LuJqp4x6WthXEeKsgfNx2PbQcNAHUAXNxDkv7mq0VEsV6a1FbmEDf71fpH3KFzlLJe5vbHDsoAAAFzORPixQAABAMARjBEAiBkHtaz4g/wNlb6n7Ja5cMbfAApRCfKS0ZZo1E9Aw79lAIgWE2fbupal2jBPP0J169nKSqvsHgp4tAqOPyghiYV/CEwDQYJKoZIhvcNAQELBQADggEBAGfmf6UFnRbLw3r+3gsOMCBmA14wG0va1i1nuGT8Eb/SNyg8VVCWGtYwuTF0eyfduUWBw60vMQtk65N0PW+wA37zUk3ICF8bqWEdFRGmfAKH5zVB194BhNBOw7WMQqguN1WwryRKrZsCr5+ggTIPiAvNzwVihRXCS9i+9n73E8XjSBlG7ntKw5qXSOoG5pf/02PoKZElNZpoE81dBL559MzuDg76iTIUS3dYM2jpr0fZ8lycooQ5Pl2CwGS5AWXMj30NLYw97wANki8JSuNwnfPIEaxFG7bZEuegPNNRwwwdLnyTeVoZEkr4J3LjsossCvGaRtrMYiYvi+wwsQe6VXk=-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
'''
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----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-----END CERTIFICATE-----
''',
'''
-----BEGIN CERTIFICATE-----MIIFUTCCBDmgAwIBAgISAw1q6Yf19BxdTu+HtDNyOALoMA0GCSqGSIb3DQEBCwUAMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQDExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0yMDA4MTMyMzI4MjhaFw0yMDExMTEyMzI4MjhaMBcxFTATBgNVBAMTDG5lcHR1bi50Zi5odTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAIgfj1oygUqTBFets/jreMYL5KTfD98e2+WKwQo5+RLGQXwGfYjAhkPENWXF9B59PtFbPJd+LfFUHvz086NyKt79imPRR2ZcAoIDHaYWHlobER1hT+YK6rphFv1FAPgdJlOCHKr2wQZGMtNqczK7/LrxOvCQ/LhR9v0B6TszeXCqPgGFgFMBBWmAvtOLLTwAWIhObHx9aPQcE7HYUWcudHYIUXDiSB1UfvnuCvcGkikGFN6wwiGrbTv0YMKJZJ592F54MxKuJlANwxztnBLppwmTpiyJVWLSSyhSrstbZaSixr4gi/WRZYXUasKLv7NNcDIYVXbL7NO6vBSxUVv+hCUCAwEAAaOCAmIwggJeMA4GA1UdDwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAdBgNVHQ4EFgQUrIk2SYTqlhe3N5p8d9z1zRx8bxgwHwYDVR0jBBgwFoAUqEpqYwR93brm0Tm3pkVl7/Oo7KEwbwYIKwYBBQUHAQEEYzBhMC4GCCsGAQUFBzABhiJodHRwOi8vb2NzcC5pbnQteDMubGV0c2VuY3J5cHQub3JnMC8GCCsGAQUFBzAChiNodHRwOi8vY2VydC5pbnQteDMubGV0c2VuY3J5cHQub3JnLzAXBgNVHREEEDAOggxuZXB0dW4udGYuaHUwTAYDVR0gBEUwQzAIBgZngQwBAgEwNwYLKwYBBAGC3xMBAQEwKDAmBggrBgEFBQcCARYaaHR0cDovL2Nwcy5sZXRzZW5jcnlwdC5vcmcwggEFBgorBgEEAdZ5AgQCBIH2BIHzAPEAdgDwlaRZ8gDRgkAQLS+TiI6tS/4dR+OZ4dA0prCoqo6ycwAAAXPqXjI3AAAEAwBHMEUCIQCMwP6ZfH0WrwK7Vxjbrg/O0vsbC6VWyNrPK2eKPtzLNwIgNMYVDlnY5lENm5LHDVmm13AyjAPtgRRtHq37Hy2HiwAAdwAHt1wb5X1o//Gwxh0jFce65ld8V5S3au68YToaadOiHAAAAXPqXjJtAAAEAwBIMEYCIQDUaKMHRvXvsCv/8O0ujD4kEI3rJFDxCTTtHp5BADeHLgIhALb7o7UG9yDMNkvx2V8vOiNZkU6fAtqRlgoLkFQd+XIRMA0GCSqGSIb3DQEBCwUAA4IBAQB+gsDtyQ5fuAaR3lFljH3aQNGcPuI8WJ7Dck6aAi31PTeFsTAgJ/D+nziC51JQvi10jUaVNcFxqu4alfJxZiRcxJcOhP/m8ydhWEfVwPpgD67RtkD62eSOVEZ+b+EIWYkG7vgIdjeBQdeBpGJ2Q5oOdXSIImzyp+lbNR5MIRl1uly37cQR7jsIdPN8+eTG6ifV7CK/tm0xS33VQ3JAGMIuEnUYDsqYy/cqPwOag0sZHs6rMitnHok2BTBekUUf6//9USzfPLw9pZ/7ZPjuzcyfR3+n2iyFn6ovTd0cJ9bg7BgZiZ9bdmquRpYX5Vw3/SIlGgIQyowpsfoAYYo5IWP7-----END CERTIFICATE-----
'''];

  factory WebServices._() => null;

  static final Dio client = _getClient();
  
  static final CookieManager _cookieManager = CookieManager(CookieJar());

  static Dio _getClient()
  {
    var client = Dio(BaseOptions(
      headers: {'Content-Type':
      PlatformHelper.isWeb() ? 'text/plain' : 'Application/json'
      },

    ));

    (client.httpClientAdapter as DefaultHttpClientAdapter).onHttpClientCreate = (client)
    {
      client.badCertificateCallback = (cert,host,port)
      { 
        
        var nums = host.split('.');
        if(nums.length > 2 && nums[0] == '192' && nums[1] == '168'){
          return false;
        }
        Vesta.logger.d('$host: ${cert.pem.trim().replaceAll("\n", "")}');
        return _certs.any((certString)=> cert.pem.trim().replaceAll('\n', '') == certString.trim().replaceAll('\n', ''));
      };
    };

    client.interceptors.add(_cookieManager);

    return client;

  }

  static final _callbacks = <_VoidFutureCallback>[];

  static final _loop = Future.doWhile(() async
  {

    await Future.delayed(Duration(milliseconds: 50));

    if(_callbacks.isNotEmpty)
    {

      Vesta.logger.d('${_callbacks.length} bottles are on the shelf.\n You Remove one sou you got...', null, null );

      try
      {
        await _callbacks[0]();
      }
      on DioError  catch(e)
      {
        if(!e.error is SocketException || (e.error as SocketException).osError.errorCode != 7)
        {
          Vesta.logger.e(e.error);
        }
        else
        {
          Vesta.showSnackbar(Text('Unable to connect to the internet!'));
          Vesta.logger.i('Unable to connect to the internet!');
        }
      }
      on SocketException catch(e) //ignoer: unused_catch_clause
      {
        if(e.osError.errorCode == 7)
        {
          Vesta.showSnackbar(Text('Unable to connect to the internet!'));
          Vesta.logger.i('Unable to connect to the internet!');
        }
        else
        {
          Vesta.logger.e(e);
        }
        
      }
      finally
      {
        _callbacks.removeAt(0);
      }

      Vesta.logger.d('${_callbacks.length} bottles on the shelf!', null, null );
    }

    return true;

  });

  static void init()
  {
    _loop.then((value) => null);
  }

  static Future<T> _callFunction<T>(_ServicesCallback callback,School school , WebDataBase request) async
  {
    Object obj;

    _VoidFutureCallback clb = () async
    {
      obj = await callback(school, request);
    };

    _callbacks.add(clb);

    await Future.doWhile(() async
    {
      await Future.delayed(Duration(milliseconds: 50));

      return obj == null;
    });

    return obj as T;

  }

  static Future<SchoolList> fetchSchools() async
  {

    return await _callFunction<SchoolList>(_fetchSchools, null, null);

  }

  static Future<SchoolList> _fetchSchools<T extends WebDataBase>(School school, WebDataBase request) async
  {
    var url = Uri.https('mobilecloudservice.cloudapp.net',
        '/MobileServiceLib/MobileCloudService.svc/GetAllNeptunMobileUrls')
        .toString();

    Response resp;
    try{
      resp = await client.post(url,data:'{}');
    }
    catch(e)
    {

      //TODO: Better checks for internet?
      if(e is SocketException)
      {
        var exp = e;
        if(exp.osError.errorCode == 7)
        {
          throw 'Unable to connect to the internet';
        }
      }
      else
      {
        print(e.toString());
      }

      Vesta.logger.e(e);

    }


    return SchoolList.fromJson(json.encode(resp.data));

  }

  static Future<bool> login(String userName, String password, School school, bool keepLoggedIn) async
  {
    try{

    if(school == null) {
      throw 'Please chose a school!';
    }
    if(userName == null || userName.isEmpty) {
      throw 'Please give a valid username!';
    }
    if(password == null || password.isEmpty) {
      throw 'Please type in a valid password!';
    }

    var login = WebDataLogin.simplifiedOnly(userName, password);

    var resp = await client.post(school.Url + '/GetTrainings',
        data: login.toJson());

    Map<String, dynamic> respBody = resp.data;

    _testResponse(respBody);

    if(respBody['TrainingList']==null) {
      throw "There isn't any associated training for this student";
    }



    StudentData.setInstance(userName, password,
        TrainingData.listFromJsonString(json.encode(respBody['TrainingList'])));

    try
    {

      if(keepLoggedIn) {
        await FileManager.saveData();
      }

    }
    catch(e)
    {
      Vesta.logger.d('Seems like we have problems with saving data...', null, null );
      Vesta.logger.e(e);
    }

    return true;

    }
    catch(e)
    {
      Vesta.logger.e(e);
      Vesta.showSnackbar(Text('$e'));
    }
    
    return false;

  }

  static Future<WebDataMessages> getMessages(School school, WebDataBase body) async
  {

    return await _callFunction(_getMessages, school, body);

  }

  static Future<WebDataMessages> _getMessages<T extends WebDataBase>(School school, WebDataBase body) async
  {
    var resp = await client.post(school.Url + '/GetMessages',
        data: body.toJson());


    Map<String,dynamic> jsonBody = resp.data;

    try
    {
      _testResponse(jsonBody);
    }
    catch(e)
    {
      Vesta.logger.e(e);
      return null;
    }

    return WebDataMessages.fromJson(jsonBody);
  }

  static Future<bool> setRead(School school, WebDataMessageRead body) async
  {

    return await _callFunction(_setRead, school, body);

  }

  static Future<bool> _setRead<T extends WebDataBase>(School school, T body) async
  {

    try{

      var resp = await client.post(school.Url + '/SetReadedMessage',
        data: body.toJson(),);

      Map<String,dynamic> jsonBody = resp.data;

      _testResponse(jsonBody);

      return true;

    }
    catch(e)
    {

      Vesta.logger.e(body.toJson() + '\n\n' + e.toString());
      return false;

    }

  }

  static Future<WebDataCalendarResponse> getCalendarData(School school,
      WebDataCalendarRequest body) async
  {

    return await _callFunction<WebDataCalendarResponse>(_getCalendarData, school, body);

  }

  static Future<WebDataCalendarResponse> _getCalendarData<T extends WebDataBase>
      (School school, T body) async
  {
    try
    {

      Vesta.logger.d('Never gonna give you up.');

      var resp = await client.post(school.Url + '/GetCalendarData',
          data: body.toJson(),);

      Vesta.logger.d('Never gonna let you down.', null, null);

      Map<String, dynamic> jsonMap = resp.data;

      Vesta.logger.d('Never gonna turn around...', null, null );

      _testResponse(jsonMap);

      Vesta.logger.d('To hurt ya\'!.', null, null );

      return WebDataCalendarResponse.fromJson(jsonMap);
    }
    catch(e)
    {

      //Sometimes Neptun is idiot and can't handle the connection :P
      if(e is String){
        if(e.contains('Connection must be open for this operation') || e.contains('Object reference not set to an instance of an object') || e.contains('OracleConnection'))
        {
            return await Future.delayed(Duration(seconds: 1), () async => await getCalendarData(school, body as WebDataCalendarRequest));
        }
      }

      Vesta.logger.e('Something went wrong...\n' + e.toString(),e);
      return null;
    }
  }

  static void _testResponse(Map<String, dynamic> jsonBody)
  {
    if(jsonBody['ExceptionData'] != null || jsonBody['ErrorMessage'] != null)
    {
      if(jsonBody['ExceptionData'] == null) {
        throw jsonBody['ErrorMessage'] as String;
      }
      throw jsonBody['ExceptionData'] as String;
    }

  }

  static Future<String> getSchoolsPrivacyPolicy(School school) async
  {
    return await _callFunction<String>(_getSchoolsPrivacyPolicy, school, null);
  }

  static Future<String> _getSchoolsPrivacyPolicy<T extends WebDataBase>(School school, T body) async
  {

    var resp = await client.post(school.Url + '/GetPrivacyStatement');

    Map<String, dynamic> json = resp.data;

    var url = json['URL'] as String;

    if(url == null) {
      return 'No data to display';
    }

    return (await client.get(url)).data.toString();

  }

  static Future<WebDataStudentBook> getStudentBookData(School school, WebDataBase body) async 
  {
    return await _callFunction<WebDataStudentBook>(_getStudentBookData, school, body);
  }

  static Future<WebDataStudentBook> _getStudentBookData<T extends WebDataBase>(School school, T body) async
  {

    var jBody = <String, dynamic>
    {
      'filter': <String, dynamic>
      {
        'TermID':0
      }
    };

    jBody.addAll(body.toJsonMap());

    try{

      var resp = await client.post(school.Url + '/GetMarkbookData', data: json.encode(jBody));
      Map<String, dynamic> jsonData = resp.data;

      _testResponse(jsonData);

      return WebDataStudentBook.fromJson(jsonData);

    }
    catch(e)
    {
      Vesta.logger.e(body.toJson() + '\n\n$e',e);
      return null;
    }
  }

  static Future<WebDataSemesters> getSemestersData(School school, WebDataSemestersRequest body) async
  {
    return await _callFunction<WebDataSemesters>(_getSemestersData, school, body);
  }

  static Future<WebDataSemesters> _getSemestersData<T extends WebDataBase>(School school, T body) async 
  {

    try{

      var b = body.toJsonMap();

      var resp = await client.post(school.Url + '/GetPeriods', data: json.encode(b));
      Map<String, dynamic> jsonData = resp.data;
      var periodlist = <Map<String,dynamic>>[];

      do
      {

        _testResponse(jsonData);
        periodlist.addAll((jsonData['PeriodList'] as List<dynamic>).cast());

        b['CurrentPage'] += 1;

        resp = await client.post(school.Url + '/GetPeriods', data: json.encode(b));

        jsonData = resp.data;

      }while(jsonData['PeriodList'] != null && (jsonData['PeriodList'] as List<dynamic>).isNotEmpty 
      && (resp.data['PeriodList'] as List<dynamic>).length < jsonData['TotalRowCount']);

      jsonData['PeriodList'] = periodlist;


      return WebDataSemesters.fromJson(jsonData);

    }
    catch(e)
    {
      Vesta.logger.e(body.toJson() + '\n\n$e',e);
      return null;
    }
  }

  static Future<List<Map<String, dynamic>>> getPeriodTerms(School school, WebDataBase body) async
  {
    return await _callFunction(_getPeriodTerms, school, body);
  }

  static Future<List<Map<String, dynamic>>> _getPeriodTerms<T extends WebDataBase>(School school, T body) async
  {

    var resp = await client.post(school.Url + '/GetPeriodTerms', data: body.toJson());

    return ((resp.data as Map<String, dynamic>)['PeriodTermsList'] as List<dynamic>).cast<Map<String, dynamic>>();

  }

  static Future<WebDataSubjectResponse> getSubjects(School school, WebDataSubjectRequest body) async 
  {
    return await _callFunction(_getSubjects, school, body);
  }

  static Future<WebDataSubjectResponse> _getSubjects<T extends WebDataBase>(School school, T body) async
  {

     try{

      var respBody = body.toJsonMap();

      if(respBody['CurrentPage'] == 0) respBody['CurrentPage'] = 1;

      var resp = await client.post(school.Url + '/GetSubjects',
        data: json.encode(respBody));

      Map<String,dynamic> jsonBody = resp.data;

      _testResponse(jsonBody);

      while(respBody['CurrentPage'] < 25 &&(resp.data['SubjectList'] != null || (resp.data['SubjectList'] as List<dynamic>).isNotEmpty ) 
      && (resp.data['SubjectList'] as List<dynamic>).length < jsonBody['TotalRowCount'])
      {

        respBody['CurrentPage'] += 1;

        resp = await client.post(school.Url + '/GetSubjects',
        data: json.encode(respBody));

        (resp.data['SubjectList'] as List<dynamic>).addAll(jsonBody['SubjectList']);

        jsonBody = resp.data;

        _testResponse(jsonBody);

      }

      return WebDataSubjectResponse.fromJson(jsonBody);

    }
    catch(e)
    {

      Vesta.logger.e(body.toJson() + '\n\n' + e.toString());
      return null;

    }


  }

  static Future<WebDataCourseResponse> getCourses(School school, WebDataCourseRequest body) async 
  {
    return await _callFunction(_getCourses, school, body);
  }
    
    
    
  static Future<WebDataCourseResponse> _getCourses<T extends WebDataBase>(School school, T body) async
  {
    try{

      var resp = await client.post(school.Url + '/GetCourses',
        data: body.toJson(),);

      Map<String,dynamic> jsonBody = resp.data;

      _testResponse(jsonBody);

      return WebDataCourseResponse.fromJson(jsonBody);

    }
    catch(e)
    {

      Vesta.logger.e(body.toJson() + '\n\n' + e.toString());
      return null;

    }
  }


  static Future<WebDataBase> saveSubject(School school, WebDataSubjectSignupRequest body) async 
  {
    return await _callFunction(_saveSubject, school, body);
  }
    
    
    
  static Future<WebDataBase> _saveSubject<T extends WebDataBase>(School school, T body) async
  {
    try{

      var resp = await client.post(school.Url + '/SaveSubject',
        data: body.toJson(),);

      Map<String,dynamic> jsonBody = resp.data;

      _testResponse(jsonBody);

      //TODO: implement remaining
      return null;

    }
    catch(e)
    {

      Vesta.logger.e('${body.toJson()}\n\n$e');
      Vesta.showSnackbar(Text('$e'));
      return null;

    }
  }

}